{"version":3,"sources":["firebase.js","Articles/ArticleList/ArticleList.js","Articles/ToggleState/ToggleState.js","Articles/ArticleItem/ArticleItem.js","Articles/ArticlesContainer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ArticleList","props","handleInput","e","setState","target","name","value","handleSubmit","preventDefault","articlesRef","database","ref","newArticle","articleTitle","state","articleSnippet","articleSource","articleLink","push","prevValue","console","log","bind","className","onSubmit","this","id","type","onChange","React","Component","ReactDOM","render","document","getElementById","ToggleState","handleDelete","articleId","remove","toggleState","prevState","isEditable","handleUpdate","updateArticle","article","onClick","title","snippet","source","href","link","rel","ArticleItem","goToToggleState","articles","map","ArticlesContainer","setArticles","newArticles","on","snapshot","val","articlesFromDB","Object","entries","App","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3502cc3.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyDUZiAnkbBAPoXINQrIp1v4b3TFRmAFXEo\",\n  authDomain: \"enviroapptwo.firebaseapp.com\",\n  databaseURL: \"https://enviroapptwo.firebaseio.com\",\n  projectId: \"enviroapptwo\",\n  storageBucket: \"enviroapptwo.appspot.com\",\n  messagingSenderId: \"81673518823\",\n  appId: \"1:81673518823:web:1fde9a7f991acfd134ec42\"\n}\n\nfirebase.initializeApp(config);\nexport default firebase;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import { ArticleItem } from '../ArticleItem';\nimport firebase from '../../firebase';\n\nclass ArticleList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      articleTitle: '',\n      articleSnippet: '',\n      articleSource: '',\n      articleLink: ''\n    };\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  handleInput = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const articlesRef = firebase.database().ref('articles');\n    const newArticle = {\n      articleTitle: this.state.articleTitle,\n      articleSnippet: this.state.articleSnippet,\n      articleSource: this.state.articleSource,\n      articleLink: this.state.articleLink\n    };\n    articlesRef.push(newArticle);\n\n    this.setState(prevValue => ({\n      articleTitle: '',\n      articleSnippet: '',\n      articleSource: '',\n      articleLink: ''\n    }));\n\n    console.log(this.state)\n  }\n\n  render () {\n    return (\n<>\n  <h1 className = \"list-header\">Add Articles</h1>\n    <form className=\"add-form\" onSubmit={this.handleSubmit}>\n      <label>Title:</label>\n      <input id=\"articleTitle\" type=\"text\" name=\"articleTitle\" onChange={this.handleInput} />\n        <br />\n      <label>Snippet:</label>\n      <input id=\"articleSnippet\" type=\"text\" name=\"articleSnippet\" onChange={this.handleInput} />\n        <br />\n        <label>Source:</label>\n        <input id=\"articleSource\" type=\"text\" name=\"articleSource\" onChange={this.handleInput} />\n          <br />\n      <label>Link:</label>\n      <input id=\"articleLink\" type=\"text\" name=\"articleLink\" onChange={this.handleInput} />\n        <br />\n      <input className=\"trigger\" type=\"submit\" value=\"Submit\" />\n    </form>\n\n\n    </>\n    );\n  }\n}\n\nReactDOM.render (\n  <ArticleList />,\n  document.getElementById('root')\n);\n\nexport { ArticleList };\n","import React from 'react';\nimport firebase from '../../firebase';\n\nclass ToggleState extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      articleTitle: '',\n      articleSnippet: '',\n      articleSource: '',\n      articleLink: '',\n      isEditable: false\n    };\n\n  }\n\n  handleDelete = (articleId) => {\n    const articlesRef = firebase.database().ref(`/articles/${articleId}`);\n      articlesRef.remove();\n    }\n\n  toggleState = () => {\n    this.setState(prevState => ({\n    isEditable: !this.state.isEditable\n  }))\n  console.log(this.state)\n  }\n\n  handleUpdate = (articleId) => {\n      const articlesRef = firebase.database().ref(`/articles/${articleId}`);\n      const updateArticle = {\n        articleTitle: this.state.articleTitle,\n        articleSnippet: this.state.articleSnippet,\n        articleSource: this.state.articleSource,\n        articleLink: this.state.articleLink\n      };\n\n      console.log(this.state.articleTitle)\n      articlesRef.push(updateArticle);\n\n      this.setState(prevValue => ({\n        articleTitle: '',\n        articleSnippet: '',\n        articleSource: '',\n        articleLink: ''\n      }));\n  }\n\n  render() {\n    const { article } = this.props;\n\n    if (this.state.isEditable === true) {\n    return (\n      <div className = \"add-form\">\n        <h1 className = \"list-header\">Update</h1>\n        <label>Title:</label>\n        <input id=\"articleTitle2\" type=\"text\" name=\"articleTitle\" onChange={() => this.handleUpdate(article.id)} />\n          <br />\n        <label>Snippet:</label>\n        <input id=\"articleSnippet2\" type=\"text\" name=\"articleSnippet\" onChange={() => this.handleUpdate(article.id)} />\n          <br />\n        <label>Source:</label>\n        <input id=\"articleSource2\" type=\"text\" name=\"articleSource\" onChange={() => this.handleUpdate(article.id)} />\n          <br />\n        <label>Link:</label>\n        <input id=\"articleLink2\" type=\"text\" name=\"articleLink\" onChange={() => this.handleUpdate(article.id)} />\n        <br />\n        <br />\n        <button className=\"trigger\" onClick={() => this.handleUpdate(article.id)}>Save</button>\n        <button className=\"trigger\" onClick={() => this.toggleState()}>Close</button>\n      </div>\n    )} else {\n    return (\n      <div className=\"inputContent\">\n      <h1>{article.title}</h1>\n      <p>{article.snippet}</p>\n      <p>{article.source}</p>\n      <button className=\"trigger\"><a className=\"trigger\" href={article.link} target=\"_blank\" rel=\"noopener noreferrer\">More Info...</a></button>\n      <button id=\"delete\" onClick={() => this.handleDelete(article.id)} className=\"trigger\">Delete</button>\n      <button id=\"update\" onClick={() => this.toggleState()} className=\"trigger\">Update</button>\n    </div>\n  )}\n  }\n}\n\nexport { ToggleState };\n","import React from 'react';\nimport { ToggleState } from '../ToggleState/ToggleState';\n//import firebase from '../../firebase';\n\nclass ArticleItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditable: false\n    };\n  }\n\n//delete article\n  // handleDelete = (articleId) => {\n  //   const articlesRef = firebase.database().ref(`/articles/${articleId}`);\n  //     articlesRef.remove();\n  //   }\n\n  goToToggleState = (e) => {\n    e.preventDefault();\n    return <ToggleState />\n  }\n//create a toggle button to create a state in which an article is being edited\n\n  // toggleState = () => {\n  //   this.setState(prevState => ({\n  //   isEditable: !this.state.isEditable\n  // }))\n  // console.log(this.state)\n  // }\n\n// handleUpdate = (articleId) => {\n//     const articlesRef = firebase.database().ref(`/articles/${articleId}`);\n//     const updateArticle = {\n//       articleTitle: this.state.articleTitle,\n//       articleSnippet: this.state.articleSnippet,\n//       articleSource: this.state.articleSource,\n//       articleLink: this.state.articleLink\n//     };\n//     articlesRef.push(updateArticle);\n//\n//     this.setState(prevValue => ({\n//       articleTitle: '',\n//       articleSnippet: '',\n//       articleSource: '',\n//       articleLink: ''\n//     }));\n//}\n//const { article } = this.props;\n  render() {\n\n    return (\n      <div>\n        {this.props.articles.map(article => {\n            return (\n                  <ToggleState article={article} />\n              )}\n            )}\n      </div>\n    )\n  }\n}\n\nexport { ArticleItem };\n","import React, { Component } from 'react';\nimport { ArticleList } from './ArticleList';\nimport { ArticleItem } from './ArticleItem';\nimport firebase from '../firebase';\n\nclass ArticlesContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      articles: [],\n    };\n}\n\ncomponentDidMount() {\n  const articlesRef = firebase.database().ref('articles');\n  articlesRef.on('value', snapshot => {\n    let articles = snapshot.val();\n\n  const articlesFromDB = Object.entries(articles).map(article => {\n    console.log('article from entries:', article)\n\n    return ({\n      id: article[0],\n      title: article[1].articleTitle,\n      snippet: article[1].articleSnippet,\n      source: article[1].articleSource,\n      link: article[1].articleLink\n      })\n    })\n    this.setState({\n      articles: articlesFromDB\n\n    })\n  })\n}\n\nsetArticles = newArticles => {\n  this.setState({\n    articles: newArticles\n  });\n};\n\nrender() {\n  const { articles } = this.state;\n  return (\n    <div>\n      <ArticleList articles={articles} />\n      <ArticleItem articles={articles} />\n    </div>\n  )\n}\n\n}\n\nexport { ArticlesContainer };\n","import React from 'react';\nimport { ArticlesContainer } from './Articles'; \nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"will-be-logo\">\n      <h1>GreenSource</h1>\n    </div>\n      <ArticlesContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}